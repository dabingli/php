字符串的声明(数据类型)
	1.可以使用双引号，也可以使用单引号
		双引号中可以解析变量，双引号中可以使用所有的转义字符
	2. <<<

分割 匹配 查找 替换

特点：如果是其他类型的数据，也可以使用字符串处理函数，先将其他类型自动转成了字符串后在处理	

	count("aaaaaa"); // 1
	strlen("hello"); //5
	echo strlen(10000); // 5

	字符串可以像数组一样，通过下标，来访问每一个字符.但不是数组(数组也可以通过{}下标访问)

		$str = "hello";
		echo $str{0}; //h  字符串建议使用{}
		echo $str[0]; //h

		赋值
			1.单个字符
				$str = "hello";
				$str{2} = "w";
				echo $str; //hewlo
			2.多个字符
				$str = "hello";
				$str{2} = "word";
				echo $str;
			3.数组
				$str = array("one"=>"hello", "two"=>"word");
				echo "aaaaaaaaa{$str["one"]}aaaaaaaaa<br>"; //aaaaaaaaahelloaaaaaaaaa
				echo "aaaaaaaaa".$str["one"]."aaaaaaaaa<br>"; //aaaaaaaaahelloaaaaaaaaa
				echo "aaaaaaaaa$str[one]aaaaaaaaa<br>"; //aaaaaaaaahelloaaaaaaaaa

	将字符串偶数组合
		$str = "ajfiwefwfawkehfia";
		$s = "";
		for($i=0; $i<strlen($str); $i++){
			if($i%2 == 0){
				$s .= $str{$i};
			}
		}
		echo $str.'<br>'; //ajfiwefwfawkehfia
		echo $s.'<br>';	//afwffwefa

		echo strlen("中国"); // 6


	中文截取字符串
		$str = "hello word";
		$str1 = "妹子你好";

		echo substr($str, 0, 7);//hello w
		echo "<br>";
		echo substr($str1, 0, 7);//妹子�
		echo "<br>";
		echo mb_substr($str1, 0, 7, "utf-8"); //妹子你好

输出字符串
	echo()  --输出字符串
	print() --输出字符串
		echo与print之间的区别
			1.print有返回值;echo没有返回值
			2.echo 可以打印多个参数; print不可以
	die() 是exit()别名，输出并退出程序
		die("bbbb"); //bbbb
		exit("aaaaa"); //aaaaa
	printf() --输出格式化字符串
	sprintf() --格式化的字符串写入一个变量中

常用字符串格式化函数
	trim 删除字符串左右空格  rtrim删除右边  ltrim删除左边

		$str = "hello word!"; //hello word!
		echo $str."<br>";
		echo rtrim($str, "!"); //hello word

		按字符算
			$str = "hello wo9r8d89i0";

			echo $str."<br>"; //hello wo9r8d89i0

			$nstr = trim($str, "89i0");

			echo $nstr; //hello wo9r8d

			2.范围
				$str = "hello world8i9i0";
				$nstr = trim($str, "i0..9"); //hello world

	str_pad() 按需求对字符串进行填充
		$str = "lamp";

		$nstr = str_pad($str, 10);
		echo strlen($nstr); //10

		2.用符号补充长度
			$str = "lamp";

			$nstr = str_pad($str, 10, "#");
			echo $nstr; //lamp######

		STR_PAD_LEFT 在左侧补
			$str = "lamp";

			$nstr = str_pad($str, 10, "#", STR_PAD_LEFT);
			echo $nstr; //######lamp

		STR_PAD_BOTH	
			$str = "lamp";

			$nstr = str_pad($str, 10, "#", STR_PAD_BOTH);
			echo $nstr; //###lamp###

		STR_PAD_RIGHT 默认
			$str = "lamp";
			$nstr = str_pad($str, 10, "#", STR_PAD_RIGHT);
			echo $nstr; //lamp######

	$str = "this is a test Apaceh MySQL PHP";

	strtolower  将字符串全部变成消协
		echo strtolower($str); //this is a test apaceh mysql php
	strtoupper()  将字符串全部变成大写
		echo strtoupper($str);//THIS IS A TEST APACEH MYSQL PHP
	ucfirst()  将第一个字的字母变成大写
		echo ucfirst($str); //This is a test Apaceh MySQL PHP
	ucwords()  将每个单词首字母转成大写
		echo ucwords($str); //This Is A Test Apaceh MySQL PHP

	组合应用
		echo ucfirst(strtolower($str)); //This is a test apaceh mysql php

和HTML标签相关联的字符串格式化
	htmlspecialchars()
		echo "<h1>hellow</h1>";  //hellow
		echo htmlspecialchars("<h1>hellow</h1>"); //<h1>hellow</h1>

	strip_tags删除标签
		echo strip_tags("<h1>hellow</h1>"); //hellow

		2.选择性保留哪些标签
			echo strip_tags("<h1><b><u>hellow</u></b></h1>", "<u><b>"); //hellow --源代码展示<b><u>hellow</u></b>

	nl2br

		$str = "this is a test\n";
		$str .= "this is a demo\n";
		$str .= "this is a hello\n";

		echo $str."<br>"; //this is a test this is a demo this is a hello 
		echo nl2br($str);	//this is a test
												this is a demo
												this is a hello

字符串比较函数
	1.使用等号比较字符串(常见)
		$str1 = "abc";
		$str2 = "abc";
		if($str1 == $str2){
			echo "相等";
		}else{
			echo "不相等";
		} //相等

		注意：如果是不区分大小写的进行比较，两个比较的字符串要么都转成大写，要么全转成小写

			$str1 = "abc";
			$str2 = "Abc";
			if(strtolower($str1) == strtolower($str2)){
				echo "相等";
			}else{
				echo "不相等";
			} //相等

		2.字符比较
			strcmp() 二进制安全字符串比较
				$str1 = "abc";
				$str2 = "Abc";
				if(strcmp($str1, $str2) == 0){
					echo "相等";
				}else{
					echo "不相等";
				} //不相等


				$str1 = "abc";
				$str2 = "abcD";
				switch(strcmp($str1, $str2)){
					case 0:
						echo "第一个字符串{$str1}等于第二个字符串{$str2}";break;
					case 1:
						echo "第一个字符串{$str1}大于第二个字符串{$str2}";break;
					case -1:
						echo "第一个字符串{$str1}小于第二个字符串{$str2}";break;
				} //第一个字符串abc小于第二个字符串abcD

			strcasecmp() 不区分大小写
				$str1 = "abc";
				$str2 = "Abc";
				switch(strcasecmp($str1, $str2)){
					case 0:
						echo "第一个字符串{$str1}等于第二个字符串{$str2}";break;
					case 1:
						echo "第一个字符串{$str1}大于第二个字符串{$str2}";break;
					case -1:
						echo "第一个字符串{$str1}小于第二个字符串{$str2}";break;
				}//第一个字符串abc等于第二个字符串Abc

		3.按自然顺序比较

			strnacasetcmp

				$str1 = "file11.txt";
				$str2 = "file2.txt";
				switch(strnatcasecmp($str1, $str2)){
					case 0:
						echo "第一个字符串{$str1}等于第二个字符串{$str2}";break;
					case 1:
						echo "第一个字符串{$str1}大于第二个字符串{$str2}";break;
					case -1:
						echo "第一个字符串{$str1}小于第二个字符串{$str2}";break;
				}//第一个字符串file11.txt大于第二个字符串file2.txt

		$arr = array("file1.txt", "file2.txt", "file11.txt", "file12.txt");
		usort($arr, "strcmp");
		print_r($arr); //Array ( [0] => file1.txt [1] => file11.txt [2] => file12.txt [3] => file2.txt )

		$arr = array("file1.txt", "file11.txt", "file12.txt", "file2.txt");
		usort($arr, "strnatcasecmp");
		print_r($arr);//Array ( [0] => file1.txt [1] => file2.txt [2] => file11.txt [3] => file12.txt )

正则
	原子
		\d    代表任意一个数字
		\D    代表任意一个非数字
		\w   代表任意一个字a-z A-Z 0-9 _
		\W   代表任意一个非字 除了 a-z A-Z 0-9 _之外
		\s     代表空白
		\S     代表任意一个非空白
		.       点元字符可以匹配除换行符以外的任意一个字符。

		自己定义原子表
			[13579]   匹配奇数

	元字符
		*   	匹配0次 1次或多次
		+      匹配1次或多次其前的原子
		？    匹配0次或1次其前的原子  
		|       匹配两个或多个分支选择
		{n}   表示其前面的原子恰好出现n次
		{n, } 表示其前面的原子出现不小于n次
		{n, m}  表示其前面的原子至少出现n次，最多出现m次
		 ^或\A   匹配输入字符串的开始位置(或在多行模式下行的开头)
		 $或\Z   匹配输入结束位置
		 \b      匹配单词的边界
		 \B      匹配除单词边界以外的部分

	修正符号
		i     修正正则表达式不区分大小写
		m   修正符号修正表达式可以视为多行
		s     修正正则表达式中的 .  可以匹配换行符号
		x     可以省略空白
		w   

	url 正则表达式
		$grep = "/(https?|ftps?):\/\/(www|email|bbs|ftp)\.(.*?)\.(com|net|cn|org)/"
	email 正则表达式
		$grep = "/\w+([+-.]\w+)*@\w+([.-][\w+])*\.(com|net|cn|org)/i"

分割  匹配  查找  替换
	1.字符串处理函数(处理快 但一些做不到)
		匹配
			strstr
				$str = "this is a test";
				if(strstr($str, "test")){
					echo "存在";
				}else{
					echo "不存在";
				} //存在

				echo strstr($str, "a"); //a test!
				echo strstr($str, "a", true); // this is
			strpos 
				$str = "this is a test!";
				if(strpos($str, "test")){
					echo "存在";
				}else{
					echo "不存在";
				} //存在

				echo strpos($str, "a"); // 8
 
			substr
				$str = "this is a test!";
				echo substr($str, 3);// s is a test!

			获取文件名
				function getFileName($url){
					$loc = strrpos($url, "/")+1;
					return substr($url, $loc);
				}
				echo getFileName("http://www.baidu.com/aaa/demo.php"); //demo.php
				echo "<br>";
				echo getFileName("../../loc/op/img/bg.png");//bg.png

				echo basename("http://www.baidu.com/aaa/demo.php");

		分割
			explode implode() -- join()

				$str = "this is a  test";
				$a = explode( " ", $str);
				print_r($a); //Array ( [0] => this [1] => is [2] => a [3] => [4] => test )

		替换 str_replace()
			$str = "http://www.lampbrother.net/php/demo.php";

			$newstr = str_replace("php", "java", $str);
			
			echo $str."<br>"; //http://www.lampbrother.net/php/demo.php
			echo $newstr; //http://www.lampbrother.net/java/demo.java
			-------
				$str = "http://www.lampbrother.net/php/demo.php";

				$num = 0;
				$newstr = str_replace("php", "java", $str, $num);

				echo "替换的次数为{$num}";替换的次数为2

			替换数组
				//非法关键字有   正常 里面 显示
				$str = "这是一句正常的句子，但里面有一些不能显示的文字";
				$num = 0;
				$newstr = str_replace(array("正常", "里面", "显示"), "**", $str, $num);

				echo $str."<br>"; //这是一句正常的句子，但里面有一些不能显示的文字
				echo $newstr."<br>"; //这是一句**的句子，但**有一些不能**的文字
				echo "替换了{$num}次"; //替换了3次

	2.正则处理函数(功能强大  但效率要低)
		匹配
			preg_match()  preg_match_all()  preg_grep()

			$str = "this is 5 a 8 te 9st";
			if(preg_match("/\d/", $str)){
				echo "存在";
			}else{
				echo "不存在";
			} //存在
		分割
			preg_split()
				$str = "this is a  test";
				print_r(preg_split("/[ae]/", $str));//Array ( [0] => this is [1] => t [2] => st )
		正则替换  preg_replace()

		其他正则函数
			preg_replace_callback
				$text = "今天是2014-02-04, 明年的2015-02-14是什么";
				echo $text."<br>"; //今天是2014-02-04, 明年的2015-02-14是什么

				$reg = "/(\d{4})(-\d{2})(-\d{2})/";

				function myfun($m){
					return ($m[1]+1).$m[2].$m[3];
				}
				echo preg_replace_callback($reg, "myfun", $text);//今天是2015-02-04, 明年的2016-02-14是什么
	注意：如果可以直接使用字符串处理函数的字符串，就不要使用正则处理



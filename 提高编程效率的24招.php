提高编程效率的24招

1、用单引号代替双引号来包含字符串，这样做会更快一些。因为php会在双引号包围的字符串中搜寻变量，单引号则不会。注意：只有echo能这么做，他是一种可以把多个字符串当作参数的函数(说明：echo是语言结构，不是真正的函数，故把函数加上了双引号)
2、$row['id']的速度要比$row[id]快很多
3、echo比print快，并且使用echo的多重参数(说明:使用逗号而不是句号)代替字符串链接，比如echo $str1,$str2。
4、foreach效率更高，尽量用foreach代替while和for循环
5、在执行for循环之前确定最大循环环数，不要每循环一次都计算最大值，最好用foreach代替
6、注销那些不用的变量尤其是大数组，以便释放内存。
7、尽量不使用__get、__set、__autoload
8、使用include()包含文件时，尽量使用绝对路径，因为它省去了php去include_path中查找文件的时间，解析操作系统路径所需的时间会更少。
9、如果想获取叫脚本开始执行(说明：即服务器端收到客户端请求)的时间，使用$_SERVER['REQUEST_TIME']要优于time()
10在项目中尽量应用php内置函数实现功能，同时尽量使用函数代替正则表达式完成相同功能。
11、str_replace函数比grep_replace函数快，但strtr函数的效率比str_replace函数还要高
12、使用选择分支语句(switch)优于使用多个if,else if语句
13、不提倡使用@屏蔽错误消息，他的效率非常低
14、开启Apache的mod_deflate模块，可以提高网页的浏览速度
15、在链接数据库时，尽量使用短链接，要及时关闭使用完毕的数据库链接。
16、在方法中递增局部变量，速度是最快的。几乎与在函数中的调用局部变量的速度相当。
17、派生类中的方法运行起来要快与在基类中定义的同样的方法。如果能将类的方法定义static，就尽量定义成static，他的速度会提升很多。
18、尽量少进行文件操作，虽然php的文件操作效率也不低
19、Apache解析一个php脚本的时间要比解析一个静态HTML页面慢很多。尽量多用静态HTML页面，少用PHP脚本
20、除非脚本可以缓存，否则每次调用时都会重新编译一次。引入一套PHP缓存机制通常可以提升25%-100%的性能，以免除编译开销
21、当操作字符串并需要检验其长度是否满足某种要求时，第一想法是使用strlen()函数。此函数执行起来速度快，因为它不做任何计算，只返回在zval结构(C的内置数据结构，用于储存php变量)中储存的已知字符串长度。但是，由于strlen()是函数，多多少少会有些慢，因为函数调用会经过诸多步骤，在某些情况下，可以使用isset()加速执行代码。例如
if(strlen($foo)<5){echo "Foo is too short"}
if(!isset($foo[5])){echo "Foo is too short"}
调用isset()恰巧比strlen()快，因为与strlen()不同的是，isset()作为一种语言结构，意味着它的执行不需要函数查找和字母小写化。也就是说，实际上在检查字符长度的顶层代码中没有太多开销
22、当执行变量$i的递增或递减时，$i++会比++$i慢一些(仅限php语言)
++$i更快是因为它只需要3条指令(opcodes),而$++需要4条指令。后置递增实际上会产生一个临时变量，这个临时变量随后被递增，而前置递增直接在原值上递增。
23、并不是事必面向对象(OOP),面向对象往往开销很大，每个方法和对象条用都会消耗很多内存
24、如果可与通过file_get_contents代替file、fopen\feof\fgets等系列方法的情况下尽量使用file_get_contents，因为它的效率要高很多，但是，要注意file_get_contents在打开一个URL文件时的PHP版本问题。

